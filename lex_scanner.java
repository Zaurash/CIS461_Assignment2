/* The following code was generated by JFlex 1.6.1 */

/* How does Cup work? */
/* We're using cup to both work with the lexer and the parser? Are they different sections in the cup file? */


import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lex_scanner.l</tt>
 */
class lex_scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int TRIPSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\7\1\6\1\0\1\7\1\5\16\2\4\0\1\7\1\0"+
    "\1\12\1\0\1\1\3\0\1\45\1\46\1\11\1\43\1\53\1\44"+
    "\1\55\1\10\1\3\11\4\1\56\1\54\1\60\1\57\1\61\2\0"+
    "\1\1\1\40\6\1\1\34\4\1\1\42\1\35\3\1\1\32\7\1"+
    "\1\47\1\62\1\50\1\0\1\1\1\0\1\15\1\36\1\13\1\17"+
    "\1\20\1\21\1\33\1\27\1\25\1\37\1\1\1\14\1\1\1\24"+
    "\1\41\2\1\1\30\1\16\1\23\1\31\1\1\1\26\1\22\2\1"+
    "\1\51\1\0\1\52\1\0\41\2\2\0\4\1\4\0\1\1\2\0"+
    "\1\2\7\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1\1\0"+
    "\u01ca\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1\21\0"+
    "\160\2\5\1\1\0\2\1\2\0\4\1\10\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\24\1\1\0\123\1\1\0\213\1\1\0\5\2"+
    "\2\0\236\1\11\0\46\1\2\0\1\1\7\0\47\1\7\0\1\1"+
    "\1\0\55\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\1\2"+
    "\10\0\33\1\5\0\3\1\15\0\5\2\6\0\1\1\4\0\13\2"+
    "\5\0\53\1\37\2\4\0\2\1\1\2\143\1\1\0\1\1\10\2"+
    "\1\0\6\2\2\1\2\2\1\0\4\2\2\1\12\2\3\1\2\0"+
    "\1\1\17\0\1\2\1\1\1\2\36\1\33\2\2\0\131\1\13\2"+
    "\1\1\16\0\12\2\41\1\11\2\2\1\4\0\1\1\5\0\26\1"+
    "\4\2\1\1\11\2\1\1\3\2\1\1\5\2\22\0\31\1\3\2"+
    "\104\0\1\1\1\0\13\1\67\0\33\2\1\0\4\2\66\1\3\2"+
    "\1\1\22\2\1\1\7\2\12\1\2\2\2\0\12\2\1\0\7\1"+
    "\1\0\7\1\1\0\3\2\1\0\10\1\2\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\1\1\3\0\4\1\2\0\1\2\1\1\7\2"+
    "\2\0\2\2\2\0\3\2\1\1\10\0\1\2\4\0\2\1\1\0"+
    "\3\1\2\2\2\0\12\2\4\1\7\0\1\1\5\0\3\2\1\0"+
    "\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\2\0\1\2\1\0\5\2\4\0\2\2\2\0"+
    "\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0\14\2\3\1"+
    "\1\2\13\0\3\2\1\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1\10\2\1\0"+
    "\3\2\1\0\3\2\2\0\1\1\17\0\2\1\2\2\2\0\12\2"+
    "\1\0\1\1\17\0\3\2\1\0\10\1\2\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1\7\2"+
    "\2\0\2\2\2\0\3\2\10\0\2\2\4\0\2\1\1\0\3\1"+
    "\2\2\2\0\12\2\1\0\1\1\20\0\1\2\1\1\1\0\6\1"+
    "\3\0\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1"+
    "\3\0\2\1\3\0\3\1\3\0\14\1\4\0\5\2\3\0\3\2"+
    "\1\0\4\2\2\0\1\1\6\0\1\2\16\0\12\2\11\0\1\1"+
    "\7\0\3\2\1\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1"+
    "\1\0\5\1\3\0\1\1\7\2\1\0\3\2\1\0\4\2\7\0"+
    "\2\2\1\0\2\1\6\0\2\1\2\2\2\0\12\2\22\0\2\2"+
    "\1\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1"+
    "\2\0\1\2\1\1\7\2\1\0\3\2\1\0\4\2\7\0\2\2"+
    "\7\0\1\1\1\0\2\1\2\2\2\0\12\2\1\0\2\1\17\0"+
    "\2\2\1\0\10\1\1\0\3\1\1\0\51\1\2\0\1\1\7\2"+
    "\1\0\3\2\1\0\4\2\1\1\10\0\1\2\10\0\2\1\2\2"+
    "\2\0\12\2\12\0\6\1\2\0\2\2\1\0\22\1\3\0\30\1"+
    "\1\0\11\1\1\0\1\1\2\0\7\1\3\0\1\2\4\0\6\2"+
    "\1\0\1\2\1\0\10\2\22\0\2\2\15\0\60\1\1\2\2\1"+
    "\7\2\4\0\10\1\10\2\1\0\12\2\47\0\2\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1"+
    "\1\2\2\1\6\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1"+
    "\1\0\6\2\2\0\12\2\2\0\4\1\40\0\1\1\27\0\2\2"+
    "\6\0\12\2\13\0\1\2\1\0\1\2\1\0\1\2\4\0\2\2"+
    "\10\1\1\0\44\1\4\0\24\2\1\0\2\2\5\1\13\2\1\0"+
    "\44\2\11\0\1\2\71\0\53\1\24\2\1\1\12\2\6\0\6\1"+
    "\4\2\4\1\3\2\1\1\3\2\2\1\7\2\3\1\4\2\15\1"+
    "\14\2\1\1\17\2\2\0\46\1\1\0\1\1\5\0\1\1\2\0"+
    "\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0\71\1\1\0"+
    "\4\1\2\0\103\1\2\0\3\2\40\0\20\1\20\0\125\1\14\0"+
    "\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\3\0\3\1\17\0"+
    "\15\1\1\0\4\1\3\2\13\0\22\1\3\2\13\0\22\1\2\2"+
    "\14\0\15\1\1\0\3\1\1\0\2\2\14\0\64\1\40\2\3\0"+
    "\1\1\3\0\2\1\1\2\2\0\12\2\41\0\3\2\2\0\12\2"+
    "\6\0\130\1\10\0\51\1\1\2\1\1\5\0\106\1\12\0\35\1"+
    "\3\0\14\2\4\0\14\2\12\0\12\2\36\1\2\0\5\1\13\0"+
    "\54\1\4\0\21\2\7\1\2\2\6\0\12\2\46\0\27\1\5\2"+
    "\4\0\65\1\12\2\1\0\35\2\2\0\13\2\6\0\12\2\15\0"+
    "\1\1\130\0\5\2\57\1\21\2\7\1\4\0\12\2\21\0\11\2"+
    "\14\0\3\2\36\1\15\2\2\1\12\2\54\1\16\2\14\0\44\1"+
    "\24\2\10\0\12\2\3\0\3\1\12\2\44\1\122\0\3\2\1\0"+
    "\25\2\4\1\1\2\4\1\3\2\2\1\11\0\300\1\47\2\25\0"+
    "\4\2\u0116\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0\10\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0\65\1"+
    "\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1"+
    "\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1\16\0\5\2"+
    "\32\0\5\2\20\0\2\1\23\0\1\1\13\0\5\2\5\0\6\2"+
    "\1\0\1\1\15\0\1\1\20\0\15\1\3\0\33\1\25\0\15\2"+
    "\4\0\1\2\3\0\14\2\21\0\1\1\4\0\1\1\2\0\12\1"+
    "\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0\1\1"+
    "\21\0\51\1\u0a77\0\57\1\1\0\57\1\1\0\205\1\6\0\4\1"+
    "\3\2\2\1\14\0\46\1\1\0\1\1\5\0\1\1\2\0\70\1"+
    "\7\0\1\1\17\0\1\2\27\1\11\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\40\2\57\0\1\1\u01d5\0\3\1\31\0\11\1\6\2"+
    "\1\0\5\1\2\0\5\1\4\0\126\1\2\0\2\2\2\0\3\1"+
    "\1\0\132\1\1\0\4\1\5\0\51\1\3\0\136\1\21\0\33\1"+
    "\65\0\20\1\u0200\0\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1"+
    "\2\0\u010d\1\3\0\20\1\12\2\2\1\24\0\57\1\1\2\4\0"+
    "\12\2\1\0\31\1\7\0\1\2\120\1\2\2\45\0\11\1\2\0"+
    "\147\1\2\0\4\1\1\0\4\1\14\0\13\1\115\0\12\1\1\2"+
    "\3\1\1\2\4\1\1\2\27\1\5\2\20\0\1\1\7\0\64\1"+
    "\14\0\2\2\62\1\21\2\13\0\12\2\6\0\22\2\6\1\3\0"+
    "\1\1\4\0\12\2\34\1\10\2\2\0\27\1\15\2\14\0\35\1"+
    "\3\0\4\2\57\1\16\2\16\0\1\1\12\2\46\0\51\1\16\2"+
    "\11\0\3\1\1\2\10\1\2\2\2\0\12\2\6\0\27\1\3\0"+
    "\1\1\1\2\4\0\60\1\1\2\1\1\3\2\2\1\2\2\5\1"+
    "\2\2\1\1\1\2\1\1\30\0\3\1\2\0\13\1\5\2\2\0"+
    "\3\1\2\2\12\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1"+
    "\1\0\7\1\221\0\43\1\10\2\1\0\2\2\2\0\12\2\6\0"+
    "\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0"+
    "\7\1\14\0\5\1\5\0\1\1\1\2\12\1\1\0\15\1\1\0"+
    "\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\154\1\41\0"+
    "\u016b\1\22\0\100\1\2\0\66\1\50\0\15\1\3\0\20\2\20\0"+
    "\7\2\14\0\2\1\30\0\3\1\31\0\1\1\6\0\5\1\1\0"+
    "\207\1\2\0\1\2\4\0\1\1\13\0\12\2\7\0\32\1\4\0"+
    "\1\1\1\0\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0"+
    "\6\1\2\0\3\1\3\0\2\1\3\0\2\1\22\0\3\2\4\0"+
    "\14\1\1\0\32\1\1\0\23\1\1\0\2\1\1\0\17\1\2\0"+
    "\16\1\42\0\173\1\105\0\65\1\210\0\1\2\202\0\35\1\3\0"+
    "\61\1\57\0\37\1\21\0\33\1\65\0\36\1\2\0\44\1\4\0"+
    "\10\1\1\0\5\1\52\0\236\1\2\0\12\2\u0356\0\6\1\2\0"+
    "\1\1\1\0\54\1\1\0\2\1\3\0\1\1\2\0\27\1\252\0"+
    "\26\1\12\0\32\1\106\0\70\1\6\0\2\1\100\0\1\1\3\2"+
    "\1\0\2\2\5\0\4\2\4\1\1\0\3\1\1\0\33\1\4\0"+
    "\3\2\4\0\1\2\40\0\35\1\203\0\66\1\12\0\26\1\12\0"+
    "\23\1\215\0\111\1\u03b7\0\3\2\65\1\17\2\37\0\12\2\20\0"+
    "\3\2\55\1\13\2\2\0\1\2\22\0\31\1\7\0\12\2\6\0"+
    "\3\2\44\1\16\2\1\0\12\2\100\0\3\2\60\1\16\2\4\1"+
    "\13\0\12\2\u04a6\0\53\1\15\2\10\0\12\2\u0936\0\u036f\1\221\0"+
    "\143\1\u0b9d\0\u042f\1\u33d1\0\u0239\1\u04c7\0\105\1\13\0\1\1\56\2"+
    "\20\0\4\2\15\1\u4060\0\2\1\u2163\0\5\2\3\0\26\2\2\0"+
    "\7\2\36\0\4\2\224\0\3\2\u01bb\0\125\1\1\0\107\1\1\0"+
    "\2\1\2\0\1\1\2\0\2\1\2\0\4\1\1\0\14\1\1\0"+
    "\1\1\1\0\7\1\1\0\101\1\1\0\4\1\2\0\10\1\1\0"+
    "\7\1\1\0\34\1\1\0\4\1\1\0\5\1\1\0\1\1\3\0"+
    "\7\1\1\0\u0154\1\2\0\31\1\1\0\31\1\1\0\37\1\1\0"+
    "\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0"+
    "\37\1\1\0\31\1\1\0\10\1\2\0\62\2\u1600\0\4\1\1\0"+
    "\33\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\12\1\1\0\21\1\5\0\3\1\1\0"+
    "\5\1\1\0\21\1\u1144\0\ua6d7\1\51\0\u1035\1\13\0\336\1\u3fe2\0"+
    "\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\2\4\1\5\1\6\1\7"+
    "\20\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\4\1\5\1\6\1\30\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\31\1\4\2\0\10\2\1\32\6\2\1\33"+
    "\1\2\1\24\1\34\1\35\1\27\1\0\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\0\1\7\1\2"+
    "\1\45\1\46\5\2\1\47\5\2\1\50\2\2\2\27"+
    "\1\30\1\0\1\2\1\51\1\52\2\2\1\53\1\54"+
    "\6\2\1\27\1\55\1\2\1\56\1\57\6\2\1\60"+
    "\1\61\3\2\1\62\1\63\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\231\0\377\0\u0132"+
    "\0\231\0\u0165\0\231\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\231\0\231\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\231\0\231\0\231"+
    "\0\u04fb\0\u052e\0\u0561\0\u0594\0\u0594\0\u05c7\0\u0594\0\u05fa"+
    "\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594\0\u0594"+
    "\0\u0594\0\u0594\0\u0594\0\u0594\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e"+
    "\0\314\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\314"+
    "\0\u09c3\0\231\0\231\0\231\0\u09f6\0\u0a29\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\u0a5c\0\u0a8f\0\231"+
    "\0\u0ac2\0\314\0\314\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\314\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\314\0\u0cf3"+
    "\0\u0d26\0\u0d59\0\u0d8c\0\231\0\u0dbf\0\u0df2\0\314\0\314"+
    "\0\u0e25\0\u0e58\0\314\0\314\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\314\0\u0ff0\0\314\0\314\0\u1023"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\314\0\314\0\u1155"+
    "\0\u1188\0\u11bb\0\314\0\314\0\314\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\2\11\1\12"+
    "\1\13\1\14\1\15\1\5\1\16\1\5\1\17\1\20"+
    "\1\21\1\5\1\22\1\23\1\24\1\25\1\5\1\26"+
    "\1\5\1\27\1\5\1\30\1\31\2\5\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\4\5\54\1\10\1\11\1\55\1\56\1\57\1\60"+
    "\30\54\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\3\54\1\75\5\4"+
    "\1\10\2\11\1\12\1\13\31\4\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\4\4\64\0\4\5\6\0\30\5\23\0\2\7"+
    "\64\0\1\11\64\0\1\76\1\77\63\0\1\100\51\0"+
    "\4\5\6\0\1\5\1\101\26\5\21\0\4\5\6\0"+
    "\11\5\1\102\16\5\21\0\4\5\6\0\5\5\1\103"+
    "\22\5\21\0\4\5\6\0\1\5\1\104\5\5\1\105"+
    "\20\5\21\0\4\5\6\0\2\5\1\106\25\5\21\0"+
    "\4\5\6\0\15\5\1\107\12\5\21\0\4\5\6\0"+
    "\26\5\1\110\1\5\21\0\4\5\6\0\6\5\1\111"+
    "\21\5\21\0\4\5\6\0\14\5\1\112\13\5\21\0"+
    "\4\5\6\0\5\5\1\113\22\5\21\0\4\5\6\0"+
    "\10\5\1\114\17\5\21\0\4\5\6\0\11\5\1\115"+
    "\16\5\21\0\4\5\6\0\23\5\1\116\4\5\21\0"+
    "\4\5\6\0\26\5\1\117\1\5\21\0\4\5\6\0"+
    "\15\5\1\120\12\5\21\0\4\5\6\0\26\5\1\121"+
    "\1\5\77\0\1\122\62\0\1\123\62\0\1\124\3\0"+
    "\5\54\2\0\3\54\1\0\47\54\1\0\5\54\2\0"+
    "\1\54\1\76\1\125\1\0\47\54\13\0\1\126\53\0"+
    "\1\127\6\0\1\130\6\0\1\131\1\0\1\132\1\133"+
    "\3\0\1\134\5\0\1\135\24\0\5\76\1\10\1\11"+
    "\54\76\11\136\1\137\51\136\12\0\1\140\51\0\4\5"+
    "\6\0\2\5\1\141\25\5\21\0\4\5\6\0\4\5"+
    "\1\142\23\5\21\0\4\5\6\0\6\5\1\143\21\5"+
    "\21\0\4\5\6\0\3\5\1\144\6\5\1\145\15\5"+
    "\21\0\4\5\6\0\10\5\1\146\17\5\21\0\4\5"+
    "\6\0\1\5\1\147\26\5\21\0\4\5\6\0\16\5"+
    "\1\150\11\5\21\0\4\5\6\0\10\5\1\151\1\152"+
    "\16\5\21\0\4\5\6\0\12\5\1\153\15\5\21\0"+
    "\4\5\6\0\10\5\1\154\17\5\21\0\4\5\6\0"+
    "\15\5\1\155\12\5\21\0\4\5\6\0\10\5\1\156"+
    "\17\5\21\0\4\5\6\0\24\5\1\157\3\5\21\0"+
    "\4\5\6\0\26\5\1\160\1\5\21\0\4\5\6\0"+
    "\10\5\1\161\17\5\20\0\5\162\2\136\2\162\1\163"+
    "\1\136\47\162\1\136\12\0\1\164\50\0\11\136\1\165"+
    "\51\136\10\0\1\11\1\137\52\0\4\5\6\0\3\5"+
    "\1\166\24\5\21\0\4\5\6\0\5\5\1\167\22\5"+
    "\21\0\4\5\6\0\6\5\1\170\21\5\21\0\4\5"+
    "\6\0\5\5\1\171\22\5\21\0\4\5\6\0\3\5"+
    "\1\172\24\5\21\0\4\5\6\0\5\5\1\173\22\5"+
    "\21\0\4\5\6\0\5\5\1\174\22\5\21\0\4\5"+
    "\6\0\1\5\1\175\26\5\21\0\4\5\6\0\16\5"+
    "\1\176\11\5\21\0\4\5\6\0\12\5\1\177\15\5"+
    "\21\0\4\5\6\0\5\5\1\200\22\5\21\0\4\5"+
    "\6\0\1\5\1\201\26\5\21\0\4\5\6\0\14\5"+
    "\1\202\13\5\20\0\5\162\2\136\2\162\1\203\1\136"+
    "\47\162\1\136\5\54\2\0\1\54\1\55\1\163\1\0"+
    "\47\54\1\0\10\136\1\11\1\165\51\136\1\0\4\5"+
    "\6\0\3\5\1\204\24\5\21\0\4\5\6\0\11\5"+
    "\1\205\16\5\21\0\4\5\6\0\5\5\1\206\22\5"+
    "\21\0\4\5\6\0\5\5\1\207\22\5\21\0\4\5"+
    "\6\0\15\5\1\210\12\5\21\0\4\5\6\0\11\5"+
    "\1\211\16\5\21\0\4\5\6\0\20\5\1\212\7\5"+
    "\21\0\4\5\6\0\5\5\1\213\22\5\21\0\4\5"+
    "\6\0\12\5\1\214\15\5\20\0\5\162\2\136\1\162"+
    "\1\55\1\203\1\136\47\162\1\136\1\0\4\5\6\0"+
    "\4\5\1\215\23\5\21\0\4\5\6\0\11\5\1\216"+
    "\16\5\21\0\4\5\6\0\20\5\1\217\7\5\21\0"+
    "\4\5\6\0\5\5\1\220\22\5\21\0\4\5\6\0"+
    "\2\5\1\221\25\5\21\0\4\5\6\0\11\5\1\222"+
    "\16\5\21\0\4\5\6\0\3\5\1\223\24\5\21\0"+
    "\4\5\6\0\15\5\1\224\12\5\21\0\4\5\6\0"+
    "\11\5\1\225\16\5\21\0\4\5\6\0\20\5\1\226"+
    "\7\5\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\21\1\14\11\26\1\2\0\21\1\3\11\1\1\1\0"+
    "\7\11\2\0\1\11\23\1\1\11\1\0\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lex_scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2862) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 54: break;
          case 2: 
            { System.out.println(yyline + " IDENT " + "\"" + yytext() + "\"");
            }
          case 55: break;
          case 3: 
            { System.out.println(yyline + " INT " + "\"" + yytext() + "\"");
            }
          case 56: break;
          case 4: 
            { /* ignore */
            }
          case 57: break;
          case 5: 
            { System.out.println(yyline + " DIVIDE " + "\"" + yytext() + "\"");
            }
          case 58: break;
          case 6: 
            { System.out.println(yyline + " TIMES " + "\"" + yytext() + "\"");
            }
          case 59: break;
          case 7: 
            { string.setLength(0); yybegin(STRING);
            }
          case 60: break;
          case 8: 
            { System.out.println(yyline + " PLUS " + "\"" + yytext() + "\"");
            }
          case 61: break;
          case 9: 
            { System.out.println(yyline + " MINUS " + "\"" + yytext() + "\"");
            }
          case 62: break;
          case 10: 
            { System.out.println(yyline + " LPAREN " + "\"" + yytext() + "\"");
            }
          case 63: break;
          case 11: 
            { System.out.println(yyline + " RPAREN " + "\"" + yytext() + "\"");
            }
          case 64: break;
          case 12: 
            { System.out.println(yyline + " LBRACE " + "\"" + yytext() + "\"");
            }
          case 65: break;
          case 13: 
            { System.out.println(yyline + " RBRACE " + "\"" + yytext() + "\"");
            }
          case 66: break;
          case 14: 
            { System.out.println(yyline + " LBRACKET " + "\"" + yytext() + "\"");
            }
          case 67: break;
          case 15: 
            { System.out.println(yyline + " RBRACKET " + "\"" + yytext() + "\"");
            }
          case 68: break;
          case 16: 
            { System.out.println(yyline + " COMMA " + "\"" + yytext() + "\"");
            }
          case 69: break;
          case 17: 
            { System.out.println(yyline + " SEMICOLON " + "\"" + yytext() + "\"");
            }
          case 70: break;
          case 18: 
            { System.out.println(yyline + " DOT " + "\"" + yytext() + "\"");
            }
          case 71: break;
          case 19: 
            { System.out.println(yyline + " COLON " + "\"" + yytext() + "\"");
            }
          case 72: break;
          case 20: 
            { System.out.println(yyline + " EQUALS " + "\"" + yytext() + "\"");
            }
          case 73: break;
          case 21: 
            { System.out.println(yyline + " LESS " + "\"" + yytext() + "\"");
            }
          case 74: break;
          case 22: 
            { System.out.println(yyline + " MORE " + "\"" + yytext() + "\"");
            }
          case 75: break;
          case 23: 
            { string.append( yytext() );
            }
          case 76: break;
          case 24: 
            { yybegin(YYINITIAL); System.out.println(yyline + " STRING " + "\"" + string.toString() + "\"");
            }
          case 77: break;
          case 25: 
            { string.append('\\');
            }
          case 78: break;
          case 26: 
            { System.out.println(yyline + " IF " + "\"" + yytext() + "\"");
            }
          case 79: break;
          case 27: 
            { System.out.println(yyline + " OR " + "\"" + yytext() + "\"");
            }
          case 80: break;
          case 28: 
            { System.out.println(yyline + " ATMOST " + "\"" + yytext() + "\"");
            }
          case 81: break;
          case 29: 
            { System.out.println(yyline + " ATLEAST " + "\"" + yytext() + "\"");
            }
          case 82: break;
          case 30: 
            { string.append('\0');
            }
          case 83: break;
          case 31: 
            { string.append('\"');
            }
          case 84: break;
          case 32: 
            { string.append('\f');
            }
          case 85: break;
          case 33: 
            { string.append('\t');
            }
          case 86: break;
          case 34: 
            { string.append('\n');
            }
          case 87: break;
          case 35: 
            { string.append('\r');
            }
          case 88: break;
          case 36: 
            { string.append('\b');
            }
          case 89: break;
          case 37: 
            { System.out.println(yyline + " AND " + "\"" + yytext() + "\"");
            }
          case 90: break;
          case 38: 
            { System.out.println(yyline + " DEF " + "\"" + yytext() + "\"");
            }
          case 91: break;
          case 39: 
            { System.out.println(yyline + " NOT " + "\"" + yytext() + "\"");
            }
          case 92: break;
          case 40: 
            { System.out.println(yyline + " OBJ " + "\"" + yytext() + "\"");
            }
          case 93: break;
          case 41: 
            { System.out.println(yyline + " ELSE " + "\"" + yytext() + "\"");
            }
          case 94: break;
          case 42: 
            { System.out.println(yyline + " ELIF " + "\"" + yytext() + "\"");
            }
          case 95: break;
          case 43: 
            { System.out.println(yyline + " TRUE " + "\"" + yytext() + "\"");
            }
          case 96: break;
          case 44: 
            { System.out.println(yyline + " none " + "\"" + yytext() + "\"");
            }
          case 97: break;
          case 45: 
            { System.out.println(yyline + " CLASS " + "\"" + yytext() + "\"");
            }
          case 98: break;
          case 46: 
            { System.out.println(yyline + " FALSE " + "\"" + yytext() + "\"");
            }
          case 99: break;
          case 47: 
            { System.out.println(yyline + " WHILE " + "\"" + yytext() + "\"");
            }
          case 100: break;
          case 48: 
            { System.out.println(yyline + " RETURN " + "\"" + yytext() + "\"");
            }
          case 101: break;
          case 49: 
            { System.out.println(yyline + " STRING " + "\"" + yytext() + "\"");
            }
          case 102: break;
          case 50: 
            { System.out.println(yyline + " EXTENDS " + "\"" + yytext() + "\"");
            }
          case 103: break;
          case 51: 
            { System.out.println(yyline + " INTEGER " + "\"" + yytext() + "\"");
            }
          case 104: break;
          case 52: 
            { System.out.println(yyline + " BOOLEAN " + "\"" + yytext() + "\"");
            }
          case 105: break;
          case 53: 
            { System.out.println(yyline + " NOTHING " + "\"" + yytext() + "\"");
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java lex_scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        lex_scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new lex_scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
